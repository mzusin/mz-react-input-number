{
  "version": 3,
  "sources": ["../../src/docs/client-side/js/menu/mobile-menu.ts", "../../src/docs/client-side/js/menu/side-menu.ts", "../../src/docs/client-side/js/dark-mode.ts", "../../src/docs/client-side/js/index.tsx"],
  "sourcesContent": ["export const initMobileMenu = () => {\n    const $btn = document.getElementById('mobile-menu-btn');\n    if(!$btn) return;\n\n    $btn.addEventListener('click', (evt) => {\n        evt.stopPropagation();\n        document.body.classList.toggle('mobile-menu-opened');\n    });\n\n    document.body.addEventListener('click', () => {\n        document.body.classList.remove('mobile-menu-opened');\n    });\n\n    const $sideMenu = document.getElementById('side-menu');\n    if(!$sideMenu) return;\n\n    $sideMenu.addEventListener('click', (evt) => {\n        evt.stopPropagation();\n    });\n\n    const $close = document.getElementById('mobile-menu-close-btn');\n    if(!$close) return;\n\n    $close.addEventListener('click', () => {\n        document.body.classList.remove('mobile-menu-opened');\n    });\n};\n", "const COLLAPSIBLE_STORAGE_KEY = 'side-menu';\n\ninterface ICollapsible {\n    id: string;\n    opened: boolean;\n}\n\nexport const initMenuScroll = () => {\n    const $menu = document.querySelector('.side-menu');\n    if(!$menu) return;\n\n    const path = window.location.pathname;\n    const $link = $menu.querySelector(`a[href='${ path }']`);\n    if(!$link) return;\n\n    $link.scrollIntoView({\n        block: 'center',\n    });\n};\n\nconst getStateFromStorage = (): ICollapsible[] => {\n    const data = window.localStorage.getItem(COLLAPSIBLE_STORAGE_KEY);\n    if(!data) return [];\n\n    let menu: ICollapsible[] = [];\n\n    try{\n        menu = JSON.parse(data) || [];\n    }\n    catch(ex){\n        // ...\n    }\n\n    return menu;\n};\n\nconst saveStateToStorage = () => {\n    const $titles = document.querySelectorAll('.side-menu [data-collapsible-title]');\n    const menu: ICollapsible[] = [];\n\n    for(const $title of $titles){\n        const id = $title.getAttribute('data-id') || '';\n        if(!id) continue;\n\n        const opened = $title.getAttribute('data-opened') === 'true';\n\n        menu.push({\n            id,\n            opened\n        });\n    }\n\n    window.localStorage.setItem(COLLAPSIBLE_STORAGE_KEY, JSON.stringify(menu));\n};\n\nconst restoreCollapsible = () => {\n    const menu = getStateFromStorage();\n    if(!Array.isArray(menu)) return;\n\n    for(const menuItem of menu){\n        const $title = document.querySelector(`.side-menu [data-id=\"${ menuItem.id }\"]`) as HTMLElement;\n        if(!$title) continue;\n\n        toggle($title, menuItem.opened, false);\n    }\n};\n\nconst toggle = ($title: HTMLElement, opened: boolean, saveToStorage: boolean) => {\n\n    $title.setAttribute('data-opened', opened.toString());\n\n    const $arrow = $title.querySelector('[data-arrow]');\n    if(!$arrow) return;\n\n    $arrow.classList.toggle('rotate-90', opened);\n    $title.nextElementSibling?.classList.toggle('hidden', !opened);\n\n    if(saveToStorage){\n        saveStateToStorage();\n    }\n};\n\nexport const initMenuCollapsible = () => {\n    const $titles = document.querySelectorAll('.side-menu [data-collapsible-title]') as NodeListOf<HTMLElement>;\n\n    for(const $title of $titles){\n        $title.addEventListener('click', () => {\n            const isOpened = $title.getAttribute('data-opened') === 'true';\n            toggle($title, !isOpened, true);\n        });\n    }\n\n    // try to restore collapsible state on page load\n    restoreCollapsible();\n};", "const MODE_STORAGE_KEY = 'mode';\n\nexport const handleDarkLightModes = () => {\n\n    const mode = window.localStorage.getItem(MODE_STORAGE_KEY) || 'light';\n    document.documentElement.classList.toggle('dark', mode === 'dark');\n\n    const $moveToDarkBtn = document.getElementById('move-to-dark-mode-btn') as HTMLButtonElement;\n    const $moveToLightBtn = document.getElementById('move-to-light-mode-btn') as HTMLButtonElement;\n\n    const moveToDark = () => {\n        document.documentElement.classList.add('dark');\n        $moveToDarkBtn.classList.add('hidden');\n        $moveToLightBtn.classList.remove('hidden');\n        window.localStorage.setItem(MODE_STORAGE_KEY, 'dark');\n    };\n\n    const moveToLight = () => {\n        document.documentElement.classList.remove('dark');\n        $moveToLightBtn.classList.add('hidden');\n        $moveToDarkBtn.classList.remove('hidden');\n        window.localStorage.setItem(MODE_STORAGE_KEY, 'light');\n    };\n\n    if(mode === 'dark'){\n        moveToDark();\n    }\n    else{\n        moveToLight();\n    }\n\n    $moveToDarkBtn?.addEventListener('click', moveToDark);\n    $moveToLightBtn?.addEventListener('click', moveToLight);\n};\n", "import { initMobileMenu } from './menu/mobile-menu';\nimport { initMenuCollapsible, initMenuScroll } from './menu/side-menu';\nimport { handleDarkLightModes } from './dark-mode';\n\nconst init = () => {\n  const $special = document.getElementById('special-page');\n  if($special) return;\n\n  initMobileMenu();\n  initMenuScroll();\n  initMenuCollapsible();\n  handleDarkLightModes();\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  init();\n});\n\nexport {};\n"],
  "mappings": "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",
  "names": ["initMobileMenu", "$btn", "evt", "$sideMenu", "$close", "COLLAPSIBLE_STORAGE_KEY", "initMenuScroll", "$menu", "path", "$link", "getStateFromStorage", "data", "menu", "ex", "saveStateToStorage", "$titles", "$title", "id", "opened", "restoreCollapsible", "menuItem", "toggle", "saveToStorage", "_a", "$arrow", "initMenuCollapsible", "isOpened", "MODE_STORAGE_KEY", "handleDarkLightModes", "mode", "$moveToDarkBtn", "$moveToLightBtn", "moveToDark", "moveToLight", "init", "initMobileMenu", "initMenuScroll", "initMenuCollapsible", "handleDarkLightModes"]
}
